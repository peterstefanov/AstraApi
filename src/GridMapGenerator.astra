agent GridMapGenerator extends Player {
	module Console console;
    module Messaging messaging;
	module System system;
		
	types mapGenerator_types{
	    formula state(string);
		formula taskPathReady(string);
		formula finishCount(int);
		formula isNotified(string);
	}
		
	initial state("Idle");
	
	rule +!init() {
        //messaging.installService("rmi", "astra.messaging.rmi.RMIService");
        //messaging.startService("rmi");
	}
	
	rule +!collision(string collision, string event) {

	    int count = gridMap.getFinishCount();
	    
	    if (count > 1) {
           !doNotify(finishCount(count));          
	    } else {
	       //update on map
	       gridMap.updateGridMap(collision, event);  
	    }	   
	    
	    Player::!collision(collision, event);   
	}
	
	rule +!positionVector(string positionVector, string event) {
 
	    int count = gridMap.getFinishCount();
	    
	    if (count > 1) {
           !doNotify(finishCount(count));    
	    } else {
	       //update the map
	       gridMap.updateGridMap(positionVector, event);
	    }  

	    Player::!positionVector(positionVector, event); 
	}
	
	rule +!position(string position, string event) {
	   
	    int count = gridMap.getFinishCount();
	    
	    if (count > 1) {
           !doNotify(finishCount(count));         
	    } else {
	       //update on map
	       gridMap.updateGridMap(position, event);
	    } 
	     
	    Player::!position(position, event);
	}
	
	rule +!doNotify(finishCount(int X)) : X == 2 & ~state("Agree") {	    
		send(request, "smartyPans", taskPathReady("Ready"));
	}
	
	rule +!doNotify(finishCount(int X)) {
	    console.println("DO NOTHING: " + X);
	}
	
	rule @message(agree, string From, state(string Agree)) {
	    +state(Agree);
		console.println(From + " : " + Agree);   
	}
	
	rule @message(refuse, string From, state(string Refuse)) {
	    +state(Refuse);
		console.println(From + " : " + Refuse);
	}
	
	rule @message(failure, string From, state(string Failure)) {
	    +state(Failure);
		console.println(From + " : " + Failure);
	}
}
